[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mobina\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mobina\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_51)
[debug]       Load.loadUnit: plugins took 55.6451ms
[debug]       Load.loadUnit: defsScala took 0.1954ms
[debug] [Loading] Scanning directory C:\Users\mobina\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mobina\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 9.7967 ms
[debug]           Load.resolveProject(global-plugins) took 30.34ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\mobina\.sbt\1.0\plugins, plugins: List(<none>))) took 55.1861ms
[debug] [Loading] Done in C:\Users\mobina\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 66.6031ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1671ms
[debug]     Load.loadUnit(file:/C:/Users/mobina/.sbt/1.0/plugins/, ...) took 127.1122ms
[debug]   Load.apply: load took 232.072ms
[debug]   Load.apply: resolveProjects took 4.1148ms
[debug]   Load.apply: finalTransforms took 35.747ms
[debug]   Load.apply: config.delegates took 3.9258ms
[debug]   Load.apply: Def.make(settings)... took 248.1322ms
[debug]   Load.apply: structureIndex took 51.96ms
[debug]   Load.apply: mkStreams took 2.0855ms
[info] loading global plugins from C:\Users\mobina\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1600.4662ms
[debug]           Load.loadUnit: plugins took 29.2812ms
[debug]           Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory D:\sample project\ScalaSampleCode\project
[debug]             Load.loadUnit: mkEval took 5.9074ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\sample project\ScalaSampleCode\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.0332 ms
[info] loading settings for project scalasamplecode-build from idea.sbt ...
[debug]               Load.resolveProject(scalasamplecode-build) took 1.4309ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalasamplecode-build, base: D:\sample project\ScalaSampleCode\project, plugins: List(<none>))) took 2.7489ms
[debug] [Loading] Done in D:\sample project\ScalaSampleCode\project, returning: (scalasamplecode-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 106.3158ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.7771ms
[debug]         Load.loadUnit(file:/D:/sample%20project/ScalaSampleCode/project/, ...) took 139.191ms
[debug]       Load.apply: load took 140.0839ms
[debug]       Load.apply: resolveProjects took 0.064ms
[debug]       Load.apply: finalTransforms took 4.1598ms
[debug]       Load.apply: config.delegates took 0.226ms
[debug]       Load.apply: Def.make(settings)... took 36.288ms
[debug]       Load.apply: structureIndex took 16.638ms
[debug]       Load.apply: mkStreams took 0.0026ms
[info] loading project definition from D:\sample project\ScalaSampleCode\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 979.3034ms
[debug]     Load.loadUnit: defsScala took 0.0017ms
[debug] [Loading] Scanning directory D:\sample project\ScalaSampleCode
[debug]       Load.loadUnit: mkEval took 0.149ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\sample project\ScalaSampleCode, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.4186 ms
[info] loading settings for project scalasamplecode from build.sbt ...
[debug]         Load.resolveProject(scalasamplecode) took 19.2837ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scalasamplecode, base: D:\sample project\ScalaSampleCode, plugins: List(<none>))) took 21.3654ms
[debug] [Loading] Done in D:\sample project\ScalaSampleCode, returning: (scalasamplecode)
[debug]     Load.loadUnit: loadedProjectsRaw took 1344.2309ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.9271ms
[debug]   Load.loadUnit(file:/D:/sample%20project/ScalaSampleCode/, ...) took 2328.8515ms
[debug] Load.apply: load took 2329.886ms
[debug] Load.apply: resolveProjects took 0.0625ms
[debug] Load.apply: finalTransforms took 12.8906ms
[debug] Load.apply: config.delegates took 0.2126ms
[debug] Load.apply: Def.make(settings)... took 43.0375ms
[debug] Load.apply: structureIndex took 27.1818ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to ScalaSampleCode (in build file:/D:/sample%20project/ScalaSampleCode/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55995 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55995, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaSampleCode (in build file:/D:/sample%20project/ScalaSampleCode/)
[debug] > Exec(idea-shell, None, None)
